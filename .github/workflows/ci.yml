name: CI

on:
  push:
    branches: [ main, "feature/refactor-phase-*" ]
  pull_request:
    branches: [ main ]

jobs:
  lint-and-type-check:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        
    - name: Run ruff
      run: ruff check .
      
    - name: Run ruff format
      run: ruff format --check .
      
    - name: Run mypy
      run: mypy invoice_pdf/ tests/

  test:
    runs-on: ubuntu-latest
    needs: lint-and-type-check
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        pip install bandit safety
        
    - name: Run security scan with bandit
      run: |
        bandit -r invoice_pdf/ -f json -o bandit-report.json || true
        bandit -r invoice_pdf/ --severity-level medium --skip B101
        
    - name: Check dependencies for vulnerabilities
      run: safety check --json --output safety-report.json || true
        
    - name: Run pytest with coverage
      run: pytest --cov=invoice_pdf --cov-report=term --cov-report=xml --cov-fail-under=70
      env:
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: always()
      with:
        file: ./coverage.xml
        fail_ci_if_error: false
        
    - name: Performance regression test
      run: |
        python -c "
        import time
        import asyncio
        from invoice_pdf.core.rate_limit import retry_with_backoff
        
        async def test_performance():
            start = time.time()
            
            async def dummy_operation():
                await asyncio.sleep(0.01)
                return 'success'
            
            # Test 100 operations with retry
            for _ in range(100):
                await retry_with_backoff(dummy_operation, max_retries=1)
                
            duration = time.time() - start
            print(f'100 retry operations took {duration:.2f}s')
            
            # Should complete in reasonable time (under 5 seconds)
            if duration > 5:
                raise Exception(f'Performance regression: {duration:.2f}s > 5s')
            
        asyncio.run(test_performance())
        print('Performance test passed')
        "
        
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json